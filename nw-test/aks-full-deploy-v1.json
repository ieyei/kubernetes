{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "NCA": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": ["true","false"],
      "metadata": {
        "description": "Options for Nexledger platform NCA v2.2 installation."
      }
    },
    "HLF": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": ["true","false"],
      "metadata": {
        "description": "Options for Nexledger platform HLF v2.2 installation."
      }
    },
    "ETH": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": ["true","false"],
      "metadata": {
        "description": "Options for Nexledger platform ETH v2.2 installation."
      }
    },
    "volSize": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Volume size(GB) for Nexledger platform v2.2 pod installation."
      }
    },
    "k8sNew": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": ["true","false"],
      "metadata": {
        "description": "Determines whether or not a new kubernetes Cluster should be provisioned."
      }
    },
    "clusterName": {
      "type": "string",
      "defaultValue": "jj-cluster",
      "metadata": {
          "description": "The name of the Managed Cluster resource."
      }
    },
    "vmNew": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": ["true","false"],
      "metadata": {
        "description": "Determines whether or not a new vm for k8s client should be provisioned."
      }
    },        
   	"vmName": {
      "type": "string",
      "defaultValue": "k8s-vm01",
      "metadata": {
        "description": "vm name"
      }
     },
    "location": {
        "type": "string",
		    "defaultValue": "[resourceGroup().location]",
        "metadata": {
            "description": "The location of the Managed Cluster resource."
        }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
          "sshPublicKey",
          "password"
      ],
      "metadata": {
          "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwnN1z9MChJZgJv3YduB+r9oMMoRNVPqATylkminXq0DhVGUPxt4edrLlqRVF9Nem2anIXN/ZmrZUO0q2jUVAm5Z5wAKbfMnyUEHOvPpgqXJ0yhwkxzXwWrN0578hnConaGVD4eLNnwoaAw814prtqh6Y2OgbI61nuCMRoU51JBBFLWahK0qZkiDXmDdvr+oaSG/jHJSP/gLs+UQRbYBAFnAUGj25H/UVATizfSK+AMSHB3AcpGufkYx0mutlzXRRM+JHmSBSOv65saUYf1KeQ0Rjs5liM0Imaq1AqULLdIegdE1be9UExEq5qIiiFWtcrBBwSxAsrULnOzdvKqgwj",
      "metadata": {
          "description": "SSH Key or password for the Virtual Machine. SSH key is recommended." 
      }    
    },       
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "16.04.0-LTS",
      "allowedValues": [
        "12.04.5-LTS",
        "14.04.5-LTS",
        "16.04.0-LTS",
        "18.04-LTS"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values: 12.04.5-LTS, 14.04.2-LTS, 15.10."
      }
    },
    "osDiskSizeGB": {
        "type": "int",
        "defaultValue": 0,
        "metadata": {
            "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
        },
        "minValue": 0,
        "maxValue": 1023
    },
    "agentCount": {
        "type": "int",
        "defaultValue": 3,
        "metadata": {
            "description": "The number of nodes for the cluster."
        },
        "minValue": 1,
        "maxValue": 50
    },
    "agentVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_B2s",
        "Standard_B2ms",
        "Standard_D2s_v3",
        "Standard_D2_v3",
        "Standard_DS2_v2",
        "Standard_D2_v2",
        "Standard_DS2",
        "Standard_D2",
        "Standard_A2_v2",
        "Standard_A2"
      ],
      "metadata": {
        "description": "The virutal machine size to use."
      }
    },    
    "vmSize": {
        "type": "string",
        "defaultValue": "Standard_B2s",
        "metadata": {
            "description": "The size of the Virtual Machine."
        }
    },
    "servicePrincipalAppId": {
      "type": "string",
      "defaultValue": "300fd872-7192-40dc-90a3-109d55bfda9e",
      "metadata": {
        "description": "Service Principal App ID (You should prepare first ..)"
      }
    },
    "servicePrincipalAppKey": {
      "type": "securestring",
      "defaultValue": "9b69966f-2118-4b99-9bba-e4a35a83b247",
      "metadata": {
        "description": "Service Principal App Key (You should prepare first ..)"
      }
    },
    "osType": {
        "type": "string",
        "defaultValue": "Linux",
        "allowedValues": [
            "Linux"
        ],
        "metadata": {
            "description": "The type of operating system."
        }
    },
    "kubernetesVersion": {
        "type": "string",
        "defaultValue": "1.16.4",
        "allowedValues": [
            "1.17.0",
            "1.16.4",
            "1.15.7"
        ],
        "metadata": {
            "description": "The version of Kubernetes."
        }
    },
    "networkPlugin": {
        "type": "string",
		"defaultValue": "kubenet",
        "allowedValues": [
            "azure",
            "kubenet"
        ],
        "metadata": {
            "description": "Network plug-in for Kubernetes."
        }
    },
    "enableRBAC": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
            "description": "RBAC bool flag for Kubernetes."
        }
    },
    "vmssNodePool": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
            "description": "Node scale out flag"
        }
    },
    "enableHttpApplicationRouting": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
            "description": "http application routing flag."
        }
    },
    "newVMNetwork": {
        "type": "string",
        "defaultValue": "true",  
        "allowedValues": ["true","false"],      
        "metadata": {
            "description": "Name of an existing VNET that will contain this AKS deployment."
        }
    },
    "VirtualNetworkName": {
        "type": "string",
        "defaultValue": "k8sNet",        
        "metadata": {
            "description": "Name of an existing VNET that will contain this AKS deployment."
        }
    },
    "SubnetName": {
        "type": "string",
        "defaultValue": "subnet-3",
        "metadata": {
            "description": "Subnet name that will contain the App Service Environment"
        }
    },
    "privateIPAddress": {
        "type": "string",
        "defaultValue": "10.10.192.101",
        "metadata": {
            "description": "Private static IP address for k8s client VM"
        }
    },
    "serviceCidr": {
        "type": "string",
        "defaultValue": "10.10.64.0/18",
        "metadata": {
            "description": "A CIDR notation IP range from which to assign service cluster IPs."
        }
    },
    "dnsServiceIP": {
        "type": "string",
        "defaultValue": "10.10.64.10",
        "metadata": {
            "description": "Containers DNS server IP address."
        }
    },
    "dockerBridgeCidr": {
        "type": "string",
        "defaultValue": "172.17.0.1/16",
        "metadata": {
            "description": "A CIDR notation IP for Docker bridge."
        }
    }	
  },
  "variables": {
    "apiVersion": "2015-06-15",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "nexledger" : "[concat('NCA=',parameters('NCA'),',ETH=',parameters('ETH'),',HLF=',parameters('HLF'),',PV_SIZE=',parameters('volSize'),'Gi')]",
    "nicName": "[concat(parameters('vmName'),'-nic1')]",
    "publicIPAddressName": "[concat(parameters('vmName'),'-101publicIP1')]",
    "dnsPrefix": "[concat(parameters('clusterName'),'-101dns')]",
    "dnsLabelPrefix": "[concat(parameters('vmName'),'-101dns')]",
    "publicIPAddressType": "Dynamic",    
    "addressPrefix": "10.10.0.0/16",
    "subnet1Name": "subnet-1",
    "subnet1Prefix": "10.10.0.0/18",
    "subnet2Name": "subnet-2",
    "subnet2Prefix": "10.10.128.0/18",
    "subnet3Name": "subnet-3",
    "subnet3Prefix": "10.10.192.0/24",
    "subnet4Name": "subnet-4",
    "subnet4Prefix": "10.10.202.0/24",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',parameters('VirtualNetworkName'))]",
    "subnet3Ref": "[concat(variables('vnetID'),'/subnets/',variables('subnet3Name'))]",
    "vnetSubnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks/subnets',parameters('VirtualNetworkName'),parameters('SubnetName'))]",
    "_fileLocation": "https://cf-templates-18i7xm54rcn51-ap-northeast-2.s3.ap-northeast-2.amazonaws.com",
    "_extensionScript": "az-init-trade.sh",
    "adminUsername": "az-user",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    }
  },
  "resources": [
    {
      "condition": "[equals(parameters('k8sNew'), 'true')]",
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2019-06-01",
      "dependsOn": [],
      "location": "[parameters('location')]",
      "name": "[parameters('clusterName')]",
      "properties": {
        "kubernetesVersion": "[parameters('kubernetesVersion')]",
        "enableRBAC": "[parameters('enableRBAC')]",
        "dnsPrefix": "[variables('dnsPrefix')]",
        "agentPoolProfiles": [
         {
           "name": "agentpool",
           "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
           "count": "[parameters('agentCount')]",
           "vmSize": "[parameters('agentVMSize')]",
           "osType": "[parameters('osType')]",
           "storageProfile": "ManagedDisks",
           "vnetSubnetID": "[variables('vnetSubnetID')]"
         }
        ],
        "linuxProfile": {
          "adminUsername": "[variables('adminUsername')]",
          "ssh": {
            "publicKeys": [
              {
               "path": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
               "keyData": "[parameters('adminPasswordOrKey')]"
              }
            ]
          }
        },
        "servicePrincipalProfile": {
          "clientId": "[parameters('servicePrincipalAppId')]",
          "Secret": "[parameters('servicePrincipalAppKey')]"
        },
        "networkProfile": {
          "networkPlugin": "[parameters('networkPlugin')]",
          "serviceCidr": "[parameters('serviceCidr')]",
          "dnsServiceIP": "[parameters('dnsServiceIP')]",
          "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
        },
        "addonProfiles": {
          "httpApplicationRouting": {
            "enabled": "[parameters('enableHttpApplicationRouting')]"
          }
        }
      },
      "tags": {}
    },
    {
      "condition": "[equals(parameters('vmNew'), 'true')]",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsLabelPrefix')]"
        }
      }
    },
    {
      "condition": "[equals(parameters('newVMNetwork'), 'true')]",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          },
          {
            "name": "[variables('subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet2Prefix')]"
            }
          },
          {
            "name": "[variables('subnet3Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet3Prefix')]"
            }
          },
          {
            "name": "[variables('subnet4Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet4Prefix')]"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('vmNew'), 'true')]",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('VirtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[parameters('privateIPAddress')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnet3Ref')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('vmNew'), 'true')]",
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
	    "identity": {
             "type": "SystemAssigned"
       },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]",
        "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      }, 
      "resources": [
        {
          "condition": "[equals(parameters('vmNew'), 'true')]",
          "type": "extensions",
          "name": "jj-vm-extension",
          "apiVersion": "2015-06-15",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(variables('_fileLocation'), '/', variables('_extensionScript'))]"
              ]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('./', variables('_extensionScript'), ' --app_id \"', parameters('servicePrincipalAppId'), '\" --app_key \"', parameters('servicePrincipalAppKey'), '\" --subscription_id \"', subscription().subscriptionId, '\" --tenant_id \"', subscription().tenantId, '\" --resource_group \"', resourceGroup().name, '\" --nexledger \"', variables('nexledger'), '\" --aks_name \"', parameters('clusterName') , '\"')]"
            }
          }
        }
      ]
    }
  ],
  "outputs": {
    "jjout" : {
      "type" : "string",
      "value": "[variables('nexledger')]"
    }
  }
}
